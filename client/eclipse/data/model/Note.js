/*
 * Automatically generated by preplate
 */
goog.provide('eclipse.data.model.Note');

goog.require('eclipse');

goog.require('goog.json');

goog.require('prestans.types.Model.EventType');
goog.require('prestans.types.Model.AttributeChangedEvent');

goog.require('prestans.types.Model');

goog.require('prestans.types.Boolean');
goog.require('prestans.types.String');
goog.require('eclipse.data.filter.Note');

/**
 * @constructor
 * @extends {prestans.types.Model}
 * @param {Object=} opt_json
 * @param {boolean=} opt_minified
*/
eclipse.data.model.Note = function(opt_json, opt_minified) {

    //Setup base model
    prestans.types.Model.call(this);

    if(goog.isDef(opt_minified) && goog.isBoolean(opt_minified) && opt_minified && goog.isDefAndNotNull(opt_json)) {
        this.noteDone_ = new prestans.types.Boolean({value: opt_json[eclipse.data.model.Note.REWRITE_MAP["note_done"]], required: true, defaultValue: false});
        this.noteText_ = new prestans.types.String({value: opt_json[eclipse.data.model.Note.REWRITE_MAP["note_text"]], required: true, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null, trim: true});
    }
    else if(goog.isDefAndNotNull(opt_json)) {
        this.noteDone_ = new prestans.types.Boolean({value: opt_json["note_done"], required: true, defaultValue: false});
        this.noteText_ = new prestans.types.String({value: opt_json["note_text"], required: true, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null, trim: true});
    }
    else {
        this.noteDone_ = new prestans.types.Boolean({required: true, defaultValue: false});
        this.noteText_ = new prestans.types.String({required: true, defaultValue: null, opt_maxLength: null, opt_minLength: null, format: null, choices: null});
    }

    //listen for array events
    
};
goog.inherits(eclipse.data.model.Note, prestans.types.Model);

eclipse.data.model.Note.Meta = {
    NoteDone: {
        REQUIRED: true,
        DEFAULT: false
    },
    NoteText: {
        REQUIRED: true,
        DEFAULT: null,
        MAX_LENGTH: null,
        MIN_LENGTH: null,
        FORMAT: null,
        CHOICES: null
    }
};

//Rewrite map
eclipse.data.model.Note.REWRITE_MAP = {
    "note_done": "b_a",
    "note_text": "b_c"
};

//Reverse rewrite map
eclipse.data.model.Note.REVERSE_REWRITE_MAP = {
    "b_a": "note_done",
    "b_c": "note_text"
};

eclipse.data.model.Note.prototype.getNoteDone = function() {
    return this.noteDone_.getValue();
};

eclipse.data.model.Note.prototype.setNoteDone = function(value) {
    var previousValue_ = this.noteDone_.getValue();
    var success_ = this.noteDone_.setValue(value);
    this.dispatchAttributeChangedEvent_("noteDone", previousValue_, this.noteDone_.getValue());
    return success_;
};



eclipse.data.model.Note.prototype.getNoteText = function() {
    return this.noteText_.getValue();
};

eclipse.data.model.Note.prototype.setNoteText = function(value) {
    var previousValue_ = this.noteText_.getValue();
    var success_ = this.noteText_.setValue(value);
    this.dispatchAttributeChangedEvent_("noteText", previousValue_, this.noteText_.getValue());
    return success_;
};



eclipse.data.model.Note.prototype.setValueForKey = function(key, value) {

    var returnVal_ = null;

    switch(key)
    {
        case "noteDone":
            returnVal_ = this.setNoteDone(value);
            break;
        case "noteText":
            returnVal_ = this.setNoteText(value);
            break;
        default:
            throw "Key: "+key+" not found in model";
    }

    return returnVal_;

};

eclipse.data.model.Note.prototype.getValueForKey = function(key) {

    var returnVal_ = null;

    switch(key)
    {
        case "noteDone":
            returnVal_ = this.getNoteDone();
            break;
        case "noteText":
            returnVal_ = this.getNoteText();
            break;
        default:
            throw "Key: "+key+" not found in model";
    }

    return returnVal_;

};

eclipse.data.model.Note.prototype.clone = function(opt_filter) {
    var json_ = this.getJSONObject(false, opt_filter);
    return new eclipse.data.model.Note(json_, false);
};

/**
 * @param {boolean} minified
 * @param {eclipse.data.filter.Note=} opt_filter
 */
eclipse.data.model.Note.prototype.getJSONObject = function(minified, opt_filter) {

    //check that filter is of correct type
    if(goog.isDefAndNotNull(opt_filter) && !(opt_filter instanceof eclipse.data.filter.Note))
        throw "Incorrect filter for this model";
    
    var jsonifiedObject_ = {};
    
    if(goog.isDef(minified) && goog.isBoolean(minified) && minified) {
                if(goog.isDef(opt_filter) && opt_filter.getNoteDone())
            jsonifiedObject_[eclipse.data.model.Note.REWRITE_MAP["note_done"]] = this.getNoteDone()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_[eclipse.data.model.Note.REWRITE_MAP["note_done"]] = this.getNoteDone()
                    if(goog.isDef(opt_filter) && opt_filter.getNoteText())
            jsonifiedObject_[eclipse.data.model.Note.REWRITE_MAP["note_text"]] = this.getNoteText()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_[eclipse.data.model.Note.REWRITE_MAP["note_text"]] = this.getNoteText()
            }
    else {
                if(goog.isDef(opt_filter) && opt_filter.getNoteDone())
            jsonifiedObject_["note_done"] = this.getNoteDone()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_["note_done"] = this.getNoteDone()
                    if(goog.isDef(opt_filter) && opt_filter.getNoteText())
            jsonifiedObject_["note_text"] = this.getNoteText()
        else if(!goog.isDef(opt_filter))
            jsonifiedObject_["note_text"] = this.getNoteText()
            }

    return jsonifiedObject_;
};

/**
 * @export
 * @param {boolean} minified
 * @param {eclipse.data.filter.Note=} opt_filter
 */
eclipse.data.model.Note.prototype.getJSONString = function(minified, opt_filter) {
    return goog.json.serialize(this.getJSONObject(minified, opt_filter));
};